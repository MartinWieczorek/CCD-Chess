/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ich' at '26.10.16 14:46' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

buildscript{

	repositories {
        jcenter()
        mavenCentral()
	}

	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
		classpath 'com.bmuschko:gradle-clover-plugin:2.0.1'
	}

}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bmuschko.clover'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.

	jcenter()
    mavenCentral()

    maven{
    	url "http://bits.netbeans.org/maven2"
    }

    maven{
    	url "http://download.osgeo.org/webdav/geotools"
    }

}

// In this section you declare the dependencies for your production and test code
dependencies {

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    compile group: 'org.jdesktop', name: 'appframework', version: '1.0.3'
    compile group: 'org.jdesktop', name: 'swing-layout', version: '1.0.2'
    compile group: 'org.jdesktop', name: 'swing-worker', version: '1.1'
    compile group: 'org.netbeans.api', name: 'org-jdesktop-layout', version: 'RELEASE802'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    
    compile group: 'junit', name: 'junit', version: '4.12'
    
    clover 'com.cenqua.clover:clover:3.2.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

test {
	ignoreFailures = true
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
           	srcDirs = ['src/main/resources']
        }
    }

    test {
		java {
			srcDirs=['src/test/java']
		}
	}
}

shadowJar {
	baseName = 'shadow'
	classifier = null

  	configurations = [project.configurations.compile]
}

def manifestClasspath = configurations.compile.collect { it.getName() }.join(',')

jar{
	manifest{
		attributes(
			'Main-Class': 'core.JChessApp',
			'Class-Path': manifestClasspath
		)
	}
}

clover {
    classesBackupDir = file("${sourceSets.main.java}-backup")
    licenseLocation = '/home/bamboo/clover.license'
    excludes = ['**/SynchronizedMultiValueMap.java']
    targetPercentage = '85%'

    contexts {
        statement {
            name = 'log'
            regexp = '^.*LOG\\..*'
        }

        method {
            name = 'main'
            regexp = 'public static void main\\(String args\\[\\]\\).*'
        }
    }

    compiler {
        encoding = 'UTF-8'

        // if the javac executable used by ant should be the same as the one used elsewhere.
        executable = file('/usr/local/java/jdk1.8.0_05') 
    }

    report {
        html = true
        pdf = true
        filter = 'log,if,else'
    }
}

task myJavadocs(type: Javadoc) {
   source = sourceSets.main.allJava
}

